# CI WorkFlow for build, test and release of Plugin Packages
name: CI for Plugin Packages
on:
  push:
    branches:
      - 'main'
    tags:
      - 'v*.*.*'
    paths-ignore:
      - 'plugins/**'
      - 'hack/test-plugin-manifests.sh'
      - 'hack/update-plugin-manifests.sh'
      - 'hack/update-preflight-manifest.sh'
      - 'hack/update-log-collector-manifest.sh'
      - '.github/workflows/plugins.yml'
  pull_request:
    branches:
      - '*'
    paths-ignore:
      - 'plugins/**'
      - 'hack/test-plugin-manifests.sh'
      - 'hack/update-plugin-manifests.sh'
      - 'hack/update-preflight-manifest.sh'
      - 'hack/update-log-collector-manifest.sh'
      - '.github/workflows/plugins.yml'

jobs:
  pre-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Run yamllint
        uses: reviewdog/action-yamllint@v1
        with:
          fail_on_error: true
          reporter: local
          filter_mode: nofilter

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.29

      - name: Run Shell lint
        run: hack/run-shell-lint.sh

      - name: Verify code patterns
        run: hack/verify-code-patterns.sh

  preflight:
    runs-on: ubuntu-latest
    needs: pre-build
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          preflight:
            - 'hack/**'
            - '.krew/**'
            - 'tools/preflight/**'

    - name: Build Preflight Package
      if: steps.filter.outputs.preflight == 'true'
      run: hack/build-preflight-artifacts.sh

      #- name: Run integration tests
      #  run: hack/run-integration-tests.sh

    - name: Ensure Required Utilities Installed
      if: steps.filter.outputs.preflight == 'true'
      run: hack/install-required-utilities.sh

    - name: Test Preflight Plugin Locally
      if: steps.filter.outputs.preflight == 'true'
      run: |
        hack/generate-test-preflight-plugin-manifest.sh
        hack/test-preflight-plugin-locally.sh

    - uses: actions/upload-artifact@v2
      if: steps.filter.outputs.preflight == 'true'
      with:
        name: preflight
        path: |
          build/preflight.tar.gz
          build/preflight-sha256.txt

  log-collector:
    runs-on: ubuntu-latest
    needs: pre-build
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            logCollector:
              - 'hack/**'
              - '.krew/**'
              - 'tools/log_collector/**'

      - name: Setup Go
        if: steps.filter.outputs.logCollector == 'true'
        uses: actions/setup-go@v2
        with:
          go-version: 1.15

      - name: Build Log-Collector Packages
        if: steps.filter.outputs.logCollector == 'true'
        uses: goreleaser/goreleaser-action@v2
        with:
          version: latest
          args: release --snapshot --skip-publish --rm-dist

      #- name: Run integration tests
      #  run: hack/run-integration-tests.sh

      - name: Ensure Required Utilities Installed
        if: steps.filter.outputs.logCollector == 'true'
        run: hack/install-required-utilities.sh

      - name: Test Log-Collector Plugin Locally
        if: steps.filter.outputs.logCollector == 'true'
        run: |
          hack/generate-test-log-collector-plugin-manifest.sh
          hack/test-log-collector-plugin-locally.sh

  release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs: [preflight, log-collector]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: preflight
          path: build

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.15

      - name: Release with GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          version: latest
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
